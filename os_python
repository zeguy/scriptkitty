#!/usr/bin/env python3

import csv

def read_employees(csv_file_location):
    csv.register_dialect('empDialect', skipinitialspace=True, strict=True)
    employee_file = csv.DictReader(open(csv_file_location), dialect = 'empDialect')
    employee_list = []
    for data in employee_file:
       employee_list.append(data)
    return employee_list

def process_data(employee_list):
    department_list = []
    for employee_data in employee_list:
        department_list.append(employee_data['Department'])
    department_data = {}
    for department_name in set(department_list):
       department_data[department_name] = department_list.count(department_name)
    return department_data

def write_report(dictionary, report_file):
    with open(report_file, "w+") as f:
        for k in sorted(dictionary):
            f.write(str(k)+':'+str(dictionary[k])+'\n')
    f.close()

employee_list = read_employees('/home/username/data/employees.csv')
print(employee_list)
dictionary = process_data(employee_list)
print(dictionary)
write_report(dictionary, '/home/username/data/test_report.txt')


###

#!/usr/bin/env python3

import csv
import re

def contains_domain(address, domain):
  """Returns True if the email address contains the given domain,
    in the domain position, false if not."""
  domain_pattern = r'[\w\.-]+@'+domain+'$'
  if re.match(domain_pattern, address):
    return True
  return False

def replace_domain(address, old_domain, new_domain):
  """Replaces the old domain with the new domain in
    the received address."""
  old_domain_pattern = r'' + old_domain + '$'
  address = re.sub(old_domain_pattern, new_domain, address)
  return address

def main():
  """Processes the list of emails, replacing any instances of the
    old domain with the new domain."""
  old_domain, new_domain = 'abc.edu', 'xyz.edu'
  csv_file_location = '/home/student-03-7e4cecc2ec34/data/user_emails.csv'
  report_file = '/home/student-03-7e4cecc2ec34/data' + '/updated_user_emails.csv'
  user_email_list = []
  old_domain_email_list = []
  new_domain_email_list = []

  with open(csv_file_location, 'r') as f:
    user_data_list = list(csv.reader(f))
    user_email_list = [data[1].strip() for data in user_data_list[1:]]

    for email_address in user_email_list:
      if contains_domain(email_address, old_domain):
        old_domain_email_list.append(email_address)
        replaced_email = replace_domain(email_address,old_domain,new_domain)
        new_domain_email_list.append(replaced_email)

    email_key = ' ' + 'Email Address'
    email_index = user_data_list[0].index(email_key)

    for user in user_data_list[1:]:
      for old_domain, new_domain in zip(old_domain_email_list, new_domain_email_list):
        if user[email_index] == ' ' + old_domain:
          user[email_index] = ' ' + new_domain
  f.close()

  with open(report_file, 'w+') as output_file:
    writer = csv.writer(output_file)
    writer.writerows(user_data_list)
    output_file.close()

main()

###

#!/usr/bin/env python3
import sys
import os
import re

def error_search(log_file):
  error = input("What is the error? ")
  returned_errors = []
  with open(log_file, mode='r',encoding='UTF-8') as file:
    for log in  file.readlines():
      error_patterns = ["error"]
      for i in range(len(error.split(' '))):
        error_patterns.append(r"{}".format(error.split(' ')[i].lower()))
      if all(re.search(error_pattern, log.lower()) for error_pattern in error_patterns):
        returned_errors.append(log)
    file.close()
  return returned_errors

def file_output(returned_errors):
  with open(os.path.expanduser('~') + '/data/errors_found.log', 'w') as file:
    for error in returned_errors:
      file.write(error)
    file.close()
if __name__ == "__main__":
  log_file = sys.argv[1]
  returned_errors = error_search(log_file)
  file_output(returned_errors)
  sys.exit(0)
    

###

#!/usr/bin/env python3
import re
import operator
import csv

usernames = []
error_messages = []
username_data = []
error_data = []

with open('syslog.log') as log:
    f = log.readlines()
    for line in f:
        username = re.search(r'\((.*?)\)', line)
        error = re.search(r"(?<=ERROR )[\w ]*", line)
        if username:
            if username.group(1) not in usernames:
                usernames.append(username.group(1))
        if error:
            if error.group(0) not in error_messages:
                error_messages.append(error.group(0))
                
    for username in usernames:
        error_count = 0
        info_count = 0
        for line in f:
            error = re.search(r"ticky: ERROR [\w ]* ", line)
            info = re.search(r"ticky: INFO [\w ]* ", line)
            if error and re.search(username, line):
                error_count += 1
            elif info and re.search(username, line):
                info_count += 1 
        username_data.append({"Username":username, "INFO":info_count, "ERROR":error_count })

    for error_message in error_messages:
        error_count = 0
        for line in f:
            error = re.search(r"(?<=ERROR )[\w ]*", line)
            if error and re.search(error_message, line):
                error_count += 1
        error_data.append({"Error":error_message, "Count":error_count })

username_data = sorted(username_data, key = lambda i: i["Username"])
error_data = sorted(error_data, key = lambda i: i["Count"], reverse=True)
error_message = "error_message.csv"
user_statistics = "user_statistics.csv"
errors_csv_columns = ['Error','Count']
per_user_csv_colums = ['Username', 'INFO', 'ERROR']

try:
    with open(error_message, 'w') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=errors_csv_columns)
        writer.writeheader()
        for data in error_data:
            writer.writerow(data)
    csvfile.close()
except IOError:
    print("I/O error") 












